export SSH_AUTH_SOCK=~/.1password/agent.sock

alias console="DISABLE_SPRING=1 LOG_SQL_QUERIES='false' bundle exec rails c"
alias console-with-sql="DISABLE_SPRING=1 LOG_SQL_QUERIES='true' bundle exec rails c"

function dgapp-dev() {
    cd ~/dg/dgapp
    ttab 'title console && cd ~/dg/dgapp && console'
    ttab 'title honcho && cd ~/dg/dgapp && wait-port 5432 && aws-login && honcho start sidekiq rails nginx'
    ttab 'title frontend && cd ~/dg/dgapp && yarn dev'
    ttab 'title db && cd ~/dg/dgapp && docker-compose up db redis'
    ttab 'title psql && cd ~/dg/dgapp && wait-port 5432 && psql'
    ttab 'title terraform && cd ~/dg/dgapp/terraform/environments/production'
}

function resolve-realm() {
    case $1 in
        prod*)
            echo -n production;;
        stag*)
            echo -n staging;;
        salesforce|salesforce-prod*|sf|sf-prod*|sales|sales-prod*)
            echo -n salesforce;;
        salesforce-stag*|sf-stag*|staging-sf|staging-sales*|sales-stag*)
            echo -n salesforce-staging;;
        *)
            echo $1
    esac
}

function dgssh-tab() {
    REALM=$(resolve-realm $1)
    shift
    ttab "title $REALM && cd ~/dg/dgapp && ./dgssh ${REALM}-dgapp $@"
}

function dg-admin-dev() {
    cd ~/dg/dgapp
    ttab 'title rails && cd ~/dg/dg-admin && console'
    ttab 'title server && cd ~/dg/dg-admin && wait-port 5432 && rails s'
    ttab 'title production && cd ~/dg/dg-admin'
    ttab 'title staging && cd ~/dg/dg-admin'
}

function dg-agent-dev() {
    cd ~/dg/datagrail-agent
    ttab 'title docker && cd ~/dg/datagrail-agent && docker-compose -f rm/docker-compose.yml down && docker-compose -f rm/docker-compose.yml up'
}

function release-notes() {
    # https://stackoverflow.com/a/14203146
    POSITIONAL_ARGS=()
    MARKDOWN="false"
    MINE="false"
    TITLES="false"
    STAGING="false"

    while [[ $# -gt 0 ]]; do
      case $1 in
        --markdown)
            MARKDOWN="true"
            shift
            ;;
        --mine)
            MINE="true"
            shift
            ;;
        --staging)
            STAGING="true"
            shift
            ;;
        --titles-only)
            TITLES="true"
            shift
            ;;
        *)
            POSITIONAL_ARGS+=("$1") # save positional arg
            shift # past argument
            ;;
      esac
    done
    set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters
    I=0
    NUM=${1:-1} 


    if [[ "$STAGING" == "true" ]]; then
        TAG_PATTERN="staging-"
        TITLE="Staging release"
    else
        TAG_PATTERN="prod-"
        TITLE="Production release"
    fi
    # Get tags for releases to report on.
    # Need n+1 so that we can compare the nth tag with the previous release.
    # Reverse the results so that we can list the most recent release first.
    TAGS=$(git tag | grep "$TAG_PATTERN" | tail -n$((NUM + 1))| sed '1!G;h;$!d')
    paste -d, <(echo $TAGS | sed -e '1d') <(echo $TAGS | sed -e '$d') | sed -e 's/,/../' | while read PAIR; do
        if [[ "$MARKDOWN" == "true" ]]; then
            echo $PAIR | sed -e "s/.*${TAG_PATTERN}/### ${TITLE} /"
            if [[ "$TITLES" == "true" ]]; then
                continue
            fi
            echo '```'
            if [[ "$MINE" == "true" ]]; then
                git --no-pager log $PAIR --pretty=format:"%h⇥%an⇥%s" | grep "⇥$(git config --get user.name)⇥" | sed 's/$/\n/' | column -t -s'⇥'
            else
                git --no-pager log $PAIR --pretty=format:"%h⇥%an⇥%s" | sed 's/$/\n/' | column -t -s'⇥'
            fi
            echo '```'
        else
            echo -ne '\033[1;36m'
            echo $PAIR | sed -e "s/.*${TAG_PATTERN}/${TITLE} /"
            echo -ne '\033[0m'
            if [[ "$TITLES" == "true" ]]; then
                continue
            fi
            if [[ "$MINE" == "true" ]]; then
                git --no-pager log $PAIR --graph --decorate-refs-exclude="tags/master-*" --decorate-refs-exclude="tags/staging-*" --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit | grep "<$(git config --get user.name)>"
            else
                git --no-pager log $PAIR --graph --decorate-refs-exclude="tags/master-*" --decorate-refs-exclude="tags/staging-*" --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
            fi
        fi
        I=$((I + 1))
        if [ $I -lt $NUM ]; then
            echo
            echo
        fi
    done
}

function branch-pr() {
    if [[ $# -ne 1 ]]; then
        echo "Pull-request ID required"
        return 1
    fi
    BRANCH=$(git rev-parse --abbrev-ref HEAD)
    if [[ "$BRANCH" == "" ]]; then
        echo "Cannot determine current branch"
        return 1
    fi
    NEW_NAME=$(echo $BRANCH | sed -e "s/^$USER\//pr\/$1\//")
    if [[ "$BRANCH" == "$NEW_NAME" ]]; then
        echo "Current branch ($BRANCH) does not match $USER/ naming pattern."
        return 1
    fi
    git branch -m $BRANCH $NEW_NAME
    git branch -vv -l $NEW_NAME
}

function update() {
    rbenv install --skip-existing && \
    bundle install && \
    gem install yard && \
    gem install foreman && \
    RAILS_ENV=development bin/rails db:migrate && \
    RAILS_ENV=development bundle exec rails db:seed:branch_env # superset of db:seed, see db/seeds/README.md
}

function update-from-main() {
    gfa && \
    git checkout origin/master && \
    update
}
